/*****************************************************************************
 *   Assignment 2
 *
 *	 Neo Yu Yao Terence, Neo Jia Wen Rachel
 *   Copyright(C) 2018, EE2028
 *   All rights reserved.
 *
 ******************************************************************************/
#include "stdio.h"
#include "math.h"
#include "string.h"
#include "stdlib.h"

#include "lpc17xx_pinsel.h"
#include "lpc17xx_gpio.h"
#include "lpc17xx_i2c.h"
#include "lpc17xx_ssp.h"
#include "lpc17xx_timer.h" // for delay
#include "lpc17xx_uart.h"

#include "joystick.h"
#include "pca9532.h"
#include "acc.h"
#include "oled.h"
#include "rgb.h"
#include "led7seg.h"
#include "temp.h"
#include "light.h"

volatile typedef enum {
	Initialization, Climb, Emergency, ItoC, Emergency_over
}MachineState; //MachineState is a type

volatile typedef enum {
	None, Rest, Music
}ClimbState; //ClimbState is a type

MachineState 		state = Initialization;
ClimbState			Climb_State = None;
ClimbState			Saved_State = None;

//Setting Specifications
static const int 		LIGHT_THRESHOLD = 300; 	//in lux
volatile uint32_t 		TEMP_THRESHOLD = 500;	//50 degree C, can be calibrated with sw3 in climb mode
static const double 	ACC_THRESHOLD = 0.5;	//in g ///original threshold at 0.1
int						temp_periods = 7;		//number of periods to read temp.
												//fast_temp_read Precision =1000/(temp_periods*10*TEMP_SCALAR_DIV10)
volatile uint32_t 		sensor_refresh_ticks = 400;

#define TEMP_TS1 1
#define TEMP_TS0 1

static uint8_t numbers_inverted[] = {0x24, 0x7D, 0xE0, 0x70, 0x39, 0x32, 0x22, 0x7C, 0x20, 0x38, 0xFF};
char saued[] = {0x32, 0x28, 0x25, 0xA2, 0x24, 0xFF};

static char *song_titles[] = {
		"Happy Birthday",
		"I am Titanium",
		"Count On Me",
		"Riptide",
		"Say something"
};

// each tone in a song is a note, duration and pause eg. C2. > note=C, duration=2, pause=.
static uint8_t * songs[] = {
		(uint8_t*)"C2.C2,D4,C4,F4,E8,",
		(uint8_t*)"C4,D2,F2,E2.C4,G2,F2,E2,E2,D2,D2,F8,",
		(uint8_t*)"E2.E2,C2,E2,G2,C2,B2,E2,G2,",
		(uint8_t*)"A2,B2,C2,D2,E2,a2,G4,E2,",
		(uint8_t*)"e2,d2,d2,d2,d2,e2,d2,c2,c4,"
};
static uint32_t notes[] = {
        3816, // C - 262 Hz
        3401, // D - 294 Hz
        3030, // E - 330 Hz
        2865, // F - 349 Hz
        2551, // G - 392 Hz
        2272, // A - 440 Hz
        2024, // B - 494 Hz
        1912, // c - 523 Hz
        1703, // d - 587 Hz
        1517, // e - 659 Hz
        1432, // f - 698 Hz
        1275, // g - 784 Hz
        1136, // a - 880 Hz
        1012, // b - 988 Hz
};

char UART_Error_msg[] =  "Error: Unrecognized Command\r"
							"Accepted Commands:\r"
							"On Acc\r"
							"Off Acc\r"
							"On Temp\r"
							"Off Temp\r"
							"On Light\r"
							"Off Light\r\n";

uint8_t 	restnow_OLED_line = 32; //OLED line to print Rest Now in climb mode
uint8_t 	dim_OLED_line = 40; //OLED line to print DIM in climb mode
int 		number_of_songs = sizeof(song_titles) / sizeof(song_titles[0]);

//Variables
//Timing variables
volatile uint32_t 	msTicks = 0; 	// counter for 1ms SysTicks
volatile uint32_t 	prev_sensor_ticks;
volatile uint32_t 	prev_alternateled_ticks;
volatile uint32_t 	prev_blink_blue_ticks;
volatile uint32_t 	prev_countdown_ticks;
volatile uint32_t 	prev_saved_ticks;
volatile uint32_t 	prev_temp_ticks;
volatile uint32_t 	prev_uart_ticks;

volatile uint32_t 	emer_start_ticks;
uint32_t 			emer_dur = 0;

//Flags
uint8_t 			SevenSegFlag = 9;
uint8_t 			RGB_FLAG = 0;
uint8_t 			countdown_flag = 0;

uint8_t 			temp_flag = 0;
uint8_t 			restnow_printed = 0;

volatile uint8_t 	scroll_updated = 1;
volatile uint8_t 	play_flag = 0;
volatile uint8_t 	song_changed = 0;

volatile uint8_t	acc_on = 1;
volatile uint8_t	temp_on = 1;
volatile uint8_t	light_on = 1;

//Counters
int 				saved_count = 0;
volatile int 		song_index = 0;
volatile int 		prev_song_index = 0;
int 				song_pointer_count = 0;
volatile int		temp_periods_cnt = 0;
volatile int 		rx_count = 0;

//Sensor input storage variables
volatile uint32_t 	luminI;

int32_t 			xoff = 0;
int32_t 			yoff = 0;
int32_t 			zoff = 0;
int8_t 				x = 0;
int8_t 				y = 0;
int8_t 				z = 0;
float 				net_acc = 0;

volatile uint32_t 	t1 = 0;
volatile uint32_t 	t2 = 0;
uint32_t 			time_diff = 0;
float 				temp = 0;		//for calculations in fast_temp_read
uint32_t 			tempvalue = 0; 	//output from fast_temp_read = temp*10

char 				rxbuf[64];

//Peripheral output storage variables
uint32_t 	ledOn = 0x0;
int 		shift = 0;
char 		uart_msg[64];
char 		temp_string[32];
char 		uart_string[32];

//TEMP_SCALAR_DIV10 definition for temperature pins configurations
#if TEMP_TS1 == 0 && TEMP_TS0 == 0
#define TEMP_SCALAR_DIV10 1
#elif TEMP_TS1 == 0 && TEMP_TS0 == 1
#define TEMP_SCALAR_DIV10 4
#elif TEMP_TS1 == 1 && TEMP_TS0 == 0
#define TEMP_SCALAR_DIV10 16
#elif TEMP_TS1 == 1 && TEMP_TS0 == 1
#define TEMP_SCALAR_DIV10 64
#endif

//PIO1_2, P0.26 used by RGB_BLUE
//#define NOTE_PIN_HIGH() GPIO_SetValue(0, 1<<26);
//#define NOTE_PIN_LOW()  GPIO_ClearValue(0, 1<<26);

//new pin at PIO0_6, P0.21
#define NOTE_PIN_HIGH() GPIO_SetValue(0, 1<<21);
#define NOTE_PIN_LOW()  GPIO_ClearValue(0, 1<<21);

uint32_t Get_Time(void){
	return msTicks;
}

static void playNote(uint32_t note, uint32_t durationMs) {
    uint32_t t = 0;
    if (note > 0) {
        while (t < (durationMs*1000)) {
            NOTE_PIN_HIGH();
            Timer0_us_Wait(note / 2);
            //delay32Us(0, note / 2);

            NOTE_PIN_LOW();
            Timer0_us_Wait(note / 2);
            //delay32Us(0, note / 2);

            t += note;
        }
    }
    else {
    	Timer0_Wait(durationMs);
        //delay32Ms(0, durationMs);
    }
}

static uint32_t getNote(uint8_t ch){
    if (ch >= 'A' && ch <= 'G')
        return notes[ch - 'A'];
    if (ch >= 'a' && ch <= 'g')
        return notes[ch - 'a' + 7];
    return 0;
}

static uint32_t getDuration(uint8_t ch){
    if (ch < '0' || ch > '9')
        return 400;
    /* number of ms */
    return (ch - '0') * 200;
}

static uint32_t getPause(uint8_t ch)
{
    switch (ch) {
    case '+': 	return 0;
    case ',': 	return 5;
    case '.': 	return 20;
    case '_': 	return 30;
    default: 	return 5;
    }
}

static void playSong(uint8_t *song) {
    uint32_t note = 0;
    uint32_t dur  = 0;
    uint32_t pause = 0;
    /*
     * A song is a collection of tones where each tone is
     * a note, duration and pause, e.g.
     *
     * "E2,F4,"
     */
    int i = 0;
    if(song_changed){
    	song_pointer_count = 0;
    	song_changed = 0;
    }
    else{
    	while(i<song_pointer_count){
		*song ++;
		i++;
    	}
	}
    if(*song != '\0' && play_flag) {
        note = getNote(*song++);
        if (*song == '\0'){
        	song_pointer_count = 0;
        	play_flag = 0;
        	return;
        }
        dur  = getDuration(*song++);
        if (*song == '\0'){
        	song_pointer_count = 0;
        	play_flag = 0;
            return;
        }
        pause = getPause(*song++);

        playNote(note, dur);
        Timer0_Wait(pause);
        song_pointer_count += 3;
    }
    if (*song == '\0'){
		song_pointer_count = 0;
		play_flag = 0;
	}
}

static void init_ssp(void){
	SSP_CFG_Type SSP_ConfigStruct;
	PINSEL_CFG_Type PinCfg;
	/*
	 * Initialize SPI pin connect
	 * P0.7 - SCK;
	 * P0.8 - MISO
	 * P0.9 - MOSI
	 * P2.2 - SSEL - used as GPIO
	 */
	PinCfg.Funcnum = 2;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 7;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 8;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 9;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Funcnum = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 2;
	PINSEL_ConfigPin(&PinCfg);

	SSP_ConfigStructInit(&SSP_ConfigStruct);

	// Initialize SSP peripheral with parameter given in structure above
	SSP_Init(LPC_SSP1, &SSP_ConfigStruct);

	// Enable SSP peripheral
	SSP_Cmd(LPC_SSP1, ENABLE);
}

static void init_i2c(void){
	PINSEL_CFG_Type PinCfg;

	/* Initialize I2C2 pin connect */
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 10;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 11;
	PINSEL_ConfigPin(&PinCfg);

	//similar to GPIO set direction
	// Initialize I2C peripheral
	I2C_Init(LPC_I2C2, 100000);

	/* Enable I2C1 operation */
	I2C_Cmd(LPC_I2C2, ENABLE);
}

static void init_GPIO(void){
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 0; // For GPIO

	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;

	//SW4
	PinCfg.Portnum = 1; //port 1
	PinCfg.Pinnum = 31; // pin 31
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(1, (1<<31), 0); //portNum 1, pin 31 (sw4 PiO2_9 mapped to P1.31), 0 for input

	//SW3 for EINT3 interrupt
	PinCfg.Portnum = 0; //port 0
	PinCfg.Pinnum = 4; // pin 4
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(0, (1<<4), 0); //portNum 0, pin 4 (sw3 BL_EN mapped to P0.4), 0 for input

	//SW3 for EINT0 interrupt, PIO2_9 at P2.10, need to change jumper connection
	PinCfg.Funcnum = 1; // For EINT0
	PinCfg.Portnum = 2; //port 2
	PinCfg.Pinnum = 10; // pin 10
	PINSEL_ConfigPin(&PinCfg);
	GPIO_SetDir(2, (1<<10), 0); //portNum 2, pin 10 (sw3 PIO2_9 mapped to P2.10), 0 for input
}

static void speaker_init(){
	PINSEL_CFG_Type PinCfg;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;

//	PinCfg.Portnum = 0; //PIO1_2, P0.26 used by RGB_BLUE
//	PinCfg.Pinnum = 26;
	PinCfg.Portnum = 0; //new pin at PIO0_6, P0.21
	PinCfg.Pinnum = 21;
	PINSEL_ConfigPin(&PinCfg);

	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 27;
	PINSEL_ConfigPin(&PinCfg);

	PinCfg.Portnum = 0;
	PinCfg.Pinnum = 28;
	PINSEL_ConfigPin(&PinCfg);

	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 13;
	PINSEL_ConfigPin(&PinCfg);

    GPIO_SetDir(0, 1<<27, 1);
    GPIO_SetDir(0, 1<<28, 1);
    GPIO_SetDir(2, 1<<13, 1);
//    GPIO_SetDir(0, 1<<26, 1); //PIO1_2, P0.26 used by RGB_BLUE
    GPIO_SetDir(0, 1<<21, 1); //new pin at PIO0_6, P0.21


    //Clear P0.27, P0.28, P2.13, as we are not doing Volume Control or shutdown
    GPIO_ClearValue(0, 1<<27); //LM4811-clk
    GPIO_ClearValue(0, 1<<28); //LM4811-up/dn
    GPIO_ClearValue(2, 1<<13); //LM4811-shutdn

        /* ---- Speaker from demo code------> */
	GPIO_SetDir(2, 1<<0, 1);
	GPIO_SetDir(2, 1<<1, 1);
}

void lightSenIntInit(){
	PINSEL_CFG_Type PinCfg;

	PinCfg.Funcnum = 0;
	PinCfg.OpenDrain = 0;
	PinCfg.Pinmode = 0;
	PinCfg.Portnum = 2;
	PinCfg.Pinnum = 5;

	PINSEL_ConfigPin(&PinCfg);

	GPIO_SetDir(2, (1<<5), 0);

	light_clearIrqStatus(); //Good to clear when initializing
	light_setLoThreshold(LIGHT_THRESHOLD); //lower threshold
}

void init_uart(void){
	UART_CFG_Type uartCfg;
	uartCfg.Baud_rate = 115200; //baud rate to match terminal programme
	uartCfg.Databits = UART_DATABIT_8; //number of bits in each data packet
	uartCfg.Parity = UART_PARITY_NONE; //for error checking
	uartCfg.Stopbits = UART_STOPBIT_1; //number of bits to use for stop

	//pin select for uart3
	PINSEL_CFG_Type PinCfg;
	PinCfg.Funcnum = 2;
	PinCfg.Pinnum = 0;
	PinCfg.Portnum = 0;
	PINSEL_ConfigPin(&PinCfg);
	PinCfg.Pinnum = 1;
	PINSEL_ConfigPin(&PinCfg);

	//supply power and setup working parts for uart3
	UART_Init(LPC_UART3, &uartCfg);
	//enable transmit for uart3
	UART_TxCmd(LPC_UART3, ENABLE);
}

static void init_everything(){
	init_i2c();
	init_ssp();
	init_GPIO();
	init_uart();

	SysTick_Config(SystemCoreClock/1000);
	temp_init(&Get_Time);

    pca9532_init();
    joystick_init();
    acc_init();
    oled_init();
    led7seg_init();
    speaker_init();
    rgb_init();
    lightSenIntInit();

    //EINT0 interrupt for SW3
    LPC_SC -> EXTINT |= 1<<0; //Clearing EINT0
    LPC_SC -> EXTMODE |= 1<<0; //EINT0 edge sensitive
    LPC_SC -> EXTPOLAR &= 0xFFFFFFFE; //EINT0 falling-edge sensitive, 0 at bit 0
    NVIC_ClearPendingIRQ(EINT0_IRQn); //clear pending
    NVIC_EnableIRQ(EINT0_IRQn);

	//EINT3 interrupt
//    LPC_GPIOINT ->IO0IntEnF |= 1<<4; //sw3 (EINT3 for sw3 is no longer used)
//    LPC_GPIOINT ->IO2IntEnF |= 1<<5; //light sensor, activates on falling edge as light sensor is active low
    LPC_GPIOINT ->IO0IntEnR |= 1<<2; //temperature sensor, activates at the start of each reading period

    LPC_GPIOINT ->IO0IntEnF |= 1 << 17; //JOYSTICK_CENTER
    LPC_GPIOINT ->IO0IntEnF |= 1 << 15; //JOYSTICK_DOWN
    LPC_GPIOINT ->IO0IntEnF |= 1 << 16; //JOYSTICK_RIGHT
	LPC_GPIOINT ->IO2IntEnF |= 1 << 3; //JOYSTICK_UP
	LPC_GPIOINT ->IO2IntEnF |= 1 << 4; //JOYSTICK_LEFT

	NVIC_ClearPendingIRQ(EINT3_IRQn); //clear pending
    NVIC_EnableIRQ(EINT3_IRQn);

    //UART Rx interrupt
	UART_IntConfig(LPC_UART3, UART_INTCFG_RBR, ENABLE); //Enable RDA and CTI interrupt
	NVIC_ClearPendingIRQ(UART3_IRQn); //clear pending
	NVIC_EnableIRQ(UART3_IRQn); //enable Interrupt for UART3

    NVIC_SetPriorityGrouping(5); //[7:6] for preempt for 4 levels, [5] for sub
	uint32_t ans = NVIC_EncodePriority(5, 0, 0); //PG, PP, SP
    NVIC_SetPriority(SysTick_IRQn,ans); //5bit priority value

    ans = NVIC_EncodePriority(5, 1, 0); //PG, PP, SP
	NVIC_SetPriority(EINT3_IRQn,ans);

	ans = NVIC_EncodePriority(5, 2, 0); //PG, PP, SP
	NVIC_SetPriority(EINT0_IRQn,ans);

	ans = NVIC_EncodePriority(5, 3, 0); //PG, PP, SP
	NVIC_SetPriority(UART3_IRQn,ans);
}

// Replacement for slow temp_read() driver function
int32_t fast_temp_read (void){
	if (~t2 && ~t1){
		time_diff = abs(t2-t1);
		//10T(C) = (period (us) / scalar_div10) - 2731 K
		temp =((time_diff*1000.0)/(temp_periods*10*TEMP_SCALAR_DIV10))-273.15;
	}
	if (temp < 16) temp = 0;
	return temp*10;
}

//RGB LEDs
//Function to deconflict PIO1_10, Port 2 Pin one used by RGB_GREEN and OLED
void setRGBLeds (uint8_t ledMask){
    if ((ledMask & RGB_RED) != 0) {
        GPIO_SetValue( 2, (1<<0) );
    } else {
        GPIO_ClearValue( 2, (1<<0) );
    }
    if ((ledMask & RGB_BLUE) != 0) {
        GPIO_SetValue( 0, (1<<26) );
    } else {
        GPIO_ClearValue( 0, (1<<26) );
    }
}

void ALTERNATE_LED(){
	//The blue and red LEDs alternate every 500 milliseconds. The Green LED should be off throughout.
	if(Get_Time() - prev_alternateled_ticks >= 500){
		if(RGB_FLAG == 0){
			setRGBLeds (RGB_BLUE);
			RGB_FLAG = 1;
			prev_alternateled_ticks = Get_Time();
//			printf("Blue: %d\n", prev_alternateled_ticks);
		}else{
			setRGBLeds (RGB_RED); // Clear value for RGB_BLUE
			RGB_FLAG = 0;
			prev_alternateled_ticks = Get_Time();
//			printf("Red: %d\n", prev_alternateled_ticks);
		}
	}
}

void BLINK_BLUE (void){
	//Blue Light for RGB LED, alternating between ON and OFF every 1 second
	if(Get_Time() - prev_blink_blue_ticks >= 1000){
//		printf("blinked blue\n");
		if(RGB_FLAG == 0){
			setRGBLeds (RGB_BLUE);
			RGB_FLAG = 1;
			prev_blink_blue_ticks = Get_Time();
		}else{
			setRGBLeds (0); // Clear value for RGB_BLUE
			RGB_FLAG = 0;
			prev_blink_blue_ticks = Get_Time();
		}
	}
}

void countdown_new(void){
	if(Get_Time() - prev_countdown_ticks >= 500){
//		printf("counted down\n");
		led7seg_setChar(numbers_inverted[SevenSegFlag], TRUE);
		prev_countdown_ticks = Get_Time();
		if (SevenSegFlag == 0){
			SevenSegFlag = 9;
			state = Climb;
//			printf("State changed from ItoC to Climb\n");
			return;
		}
		SevenSegFlag -- ;
	}
}

void saved(void){
	//5-second duration should elapse before the device enters CLIMB Mode automatically.
	//During these 5 seconds, the 7-segment display should show the letters S-A-U-E-D, with each letter changing every 1 second (V cannot be displayed on the 7-segment, so it is replaced with U').
	if(Get_Time() - prev_saved_ticks >= 1000){
		led7seg_setChar(saued[saved_count], TRUE);
		prev_saved_ticks = Get_Time();
		if (saved_count == 5){
			saved_count = 0;
			state = Climb;
//			printf("State changed from Emergency_over to Climb\n");
			return;
		}
		saved_count ++ ;
	}
}

//Modes
void do_Initialization(){
//	printf("Entered Initialization Mode\n");
	//display "Initialization mode. Press TOGGLE to climb"
	oled_clearScreen(OLED_COLOR_BLACK);
	oled_putString(0, 0, (uint8_t *) "Initialization", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(0, 8, (uint8_t *) "mode. Press", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(0, 16, (uint8_t *) "TOGGLE to climb", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	//send a message to FiTrackX that reads “Start"
	sprintf(uart_msg, "Start\r\n");
	UART_Send(LPC_UART3, (uint8_t *) uart_msg, strlen(uart_msg), BLOCKING);
	while(state == Initialization){}
	//MODE_TOGGLE with SW3 to ItoC via interrupt
}

void do_toclimb(){
//	printf("Entered ItoC Mode\n");
	//OLED display “INITIALIZATION COMPLETE. ENTERING CLIMB MODE”
	oled_clearScreen(OLED_COLOR_BLACK);
	oled_putString(0, 0, (uint8_t *) "INITIALIZATION", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(0, 8, (uint8_t *) "COMPLETE.", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
	oled_putString(0, 16, (uint8_t *) "ENTERING CLIMB MODE", OLED_COLOR_WHITE, OLED_COLOR_BLACK);

	prev_countdown_ticks
	= prev_blink_blue_ticks = Get_Time();

	while(state == ItoC){
		//MODE_TOGGLE is pressed in Initialization mode > 7seg countdown from 9 to 0 inclusive (decrease every 500ms)
		countdown_new();
		//>RGB LED should blink as described in BLINK_BLUE
		BLINK_BLUE();
		//After, enter CLIMB mode //Called in countdown_new()
	}
}

void check_ClimbSensors(){ //Called in all Climb_State
	if(acc_on){
		//The net acceleration (to 2 decimal place) should be displayed on the OLED screen in the following format: "Acc: x.xx" where x.xx is the net acceleration accurate to 2 decimal places, in 'g's (1g = 9.8m/s2).
		acc_read(&x, &y, &z);
		x = x+xoff;
		y = y+yoff;
		z = z+zoff;
		net_acc = (sqrt(x*x + y*y + z*z))/ 64;
		//EMERGENCY Mode may be triggered through Fall Detection (shaking the board gently, net acceleration> ACC_THRESHOLD) in CLIMB Mode. No other mode should be able to trigger EMERGENCY Mode.
		if(net_acc > ACC_THRESHOLD){
//			printf("State changed from Climb to Emergency\n");
			state = Emergency;
		}
	}

	if(light_on){
		//light sensor should be continuously read
		light_enable();
		luminI = light_read();

		//If the light sensor reading falls below LIGHT_THRESHOLD, the lights on LED_ARRAY should light up proportionately to how low the ambient light is (i.e., the dimmer the ambient light, the more the number of LEDs that should be lit).
		//If the light sensor reading is above LIGHT_THRESHOLD, LED_ARRAY should not be lit.
		shift = luminI / 18.75;
		ledOn = (shift <= 16)?(1 << (16-shift)) - 1: 0x0; //max 1<<16 - 1 = 0xffff (16 1's), min 1<<0 - 1 = 0
		pca9532_setLeds(ledOn, 0xffff); // turns on ledOn and off everything else, ledOn takes priority
	}

	if(temp_on){
		//If the temperature crosses TEMP_THRESHOLD, the OLED screen should show ‘REST NOW’ for 3 seconds before returning to CLIMB Mode.
		//This should only be triggered once every time the temperature crosses TEMP_THRESHOLD.
		tempvalue = (fast_temp_read() != 0)? fast_temp_read():tempvalue; //gives 10* temperature in degree C
		if (tempvalue > TEMP_THRESHOLD && temp_flag == 0){ //maybe can use interrupt?
			if(Climb_State != Rest) Saved_State = Climb_State;
			Climb_State = Rest;
		}
		//unless the temperature goes below TEMP_THRESHOLD and crosses it again.
		else if (tempvalue <= TEMP_THRESHOLD && temp_flag == 1){
			temp_flag = 0;
		}
	}

//The accelerometer, temperature and light sensor readings should be sent to FiTrackX once every 5 seconds.
	if ((Get_Time() - prev_uart_ticks) >= 5000){
		if(acc_on){
			sprintf(uart_msg,"Acc: %5.2f g ", net_acc);
			UART_Send(LPC_UART3, (uint8_t*)uart_msg, strlen(uart_msg), BLOCKING);
		}
		if(light_on){
			sprintf(uart_msg,"Light: %3lu lux ",luminI);
			UART_Send(LPC_UART3, (uint8_t*)uart_msg, strlen(uart_msg), BLOCKING);
		}
		if(temp_on){
			sprintf(uart_msg,"Temp: %lu.%lu deg ", tempvalue/10, tempvalue%10);
			UART_Send(LPC_UART3, (uint8_t*)uart_msg, strlen(uart_msg), BLOCKING);
		}
		sprintf(uart_msg,"\r\n");
		UART_Send(LPC_UART3, (uint8_t*)uart_msg, strlen(uart_msg), BLOCKING);
		prev_uart_ticks = Get_Time();
	}
}

void refresh_ClimbOLED(){ //Called in Climb_State = None
	//Refresh OLED
	if ((Get_Time() - prev_sensor_ticks) >= sensor_refresh_ticks){
		if(acc_on){
			sprintf(temp_string,"Acc: %5.2f g", net_acc);
			oled_putString(0, 8, (uint8_t *) temp_string, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
		}
		else oled_fillRect(0, 8, OLED_DISPLAY_WIDTH, 16, OLED_COLOR_BLACK);
		if(temp_on){
			//temperature sensor should output the temperature reading (to 1 decimal place) on the OLED screen in the following format: "Temp: xx.x deg" where xx.x is the temperature reading in oC accurate to 1 decimal place.
			sprintf(temp_string,"Temp: %lu.%lu deg", tempvalue/10, tempvalue%10);
			oled_putString(0, 16, (uint8_t *) temp_string, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
		}
		else oled_fillRect(0, 16, OLED_DISPLAY_WIDTH, 24, OLED_COLOR_BLACK);
		prev_sensor_ticks = Get_Time();
	}

	if(light_on){ //placed outside sensor_refresh_ticks to make ledarray more responsive
		//light sensor reading printed on the OLED display in the following format: "Light: xx lux" where xx is the reading.
		sprintf(temp_string,"Light: %3lu lux",luminI);
		oled_putString(0, 24, (uint8_t *) temp_string, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

		if(luminI < LIGHT_THRESHOLD){ //cannot enter Dim from Music or Rest states
			//A message should also be displayed on the OLED screen saying "DIM"
			oled_putString(0, dim_OLED_line, (uint8_t *) "DIM", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
		}
		else oled_fillRect(0, dim_OLED_line, OLED_DISPLAY_WIDTH, dim_OLED_line+8, OLED_COLOR_BLACK);
	}
	else oled_fillRect(0, 24, OLED_DISPLAY_WIDTH, 32, OLED_COLOR_BLACK);
}

void do_Climb(){
//	printf("Entered Climb Mode\n");
	led7seg_setChar(0xFF, TRUE);
	setRGBLeds(0); // Clear value for RGB_BLUE

	//The accelerometer readings should be initialized to be close to zero when the device enters CLIMB Mode.
	acc_read(&x, &y, &z);
	xoff = -x;
	yoff = -y;
	zoff = -z;
	
	prev_sensor_ticks
	= prev_uart_ticks = Get_Time();

	//send a message to FiTrackX that reads “CLIMB mode"
	sprintf(uart_msg, "CLIMB mode\r\n");
	UART_Send(LPC_UART3, (uint8_t *) uart_msg, strlen(uart_msg), BLOCKING);

	while(state == Climb){
		if(Climb_State == None && state == Climb){
//			printf("Entered Climb_State None\n");
			//OLED display "CLIMB"
			oled_clearScreen(OLED_COLOR_BLACK);
			oled_putString(0, 0, (uint8_t *) "CLIMB", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			while (Climb_State == None && state == Climb){
				check_ClimbSensors();
				refresh_ClimbOLED();
			}
		}
		if(Climb_State == Rest && state == Climb){
//			printf("Entered Climb_State Rest\n");
			prev_temp_ticks = Get_Time(); //Time that programme entered Rest
			oled_clearScreen(OLED_COLOR_BLACK);
			oled_putString(0, restnow_OLED_line, (uint8_t *) "REST NOW", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			//If the temperature still remains above TEMP_THRESHOLD after 3 seconds, the alert should NOT be triggered again
			temp_flag = 1;
			restnow_printed = 1;
			// the OLED screen should show ‘REST NOW’ for 3 seconds before returning to CLIMB Mode.
			while(Get_Time() - prev_temp_ticks <= 3000  && state == Climb){ //cannot quit Rest state by changing Climb_State, got to wait for 3000ms to be over before exit
				check_ClimbSensors();
			}
//			printf("Exit Ticks: %lu, Entered ticks: %lu\n", Get_Time(), prev_temp_ticks);
			Climb_State = Saved_State; //go back to either Music or Climb
			restnow_printed = 0;
		}
		if(Climb_State == Music && state == Climb){
//			printf("Entered Climb_State Music\n");
			oled_clearScreen(OLED_COLOR_BLACK);
			oled_putString(0, 0, (uint8_t *) "MUSIC Player", OLED_COLOR_WHITE, OLED_COLOR_BLACK);
			oled_line(0, 9, OLED_DISPLAY_WIDTH, 9, OLED_COLOR_WHITE);
			int i=0;
			while (i< number_of_songs){
				if(i != song_index)
					oled_putString(0, i*10 + 10, (uint8_t *) song_titles[i], OLED_COLOR_WHITE, OLED_COLOR_BLACK);
				else
					oled_putString(0, song_index*10 + 10, (uint8_t *) song_titles[song_index], OLED_COLOR_BLACK, OLED_COLOR_WHITE);
				i++;
			}
			while(Climb_State == Music  && state == Climb){
				if ((Get_Time() - prev_sensor_ticks) >= sensor_refresh_ticks){
					check_ClimbSensors();
					prev_sensor_ticks = Get_Time();
				}
				if(scroll_updated == 0){
					oled_putString(0, prev_song_index*10 + 10, (uint8_t *) song_titles[prev_song_index], OLED_COLOR_WHITE, OLED_COLOR_BLACK);
					oled_putString(0, song_index*10 + 10, (uint8_t *) song_titles[song_index], OLED_COLOR_BLACK, OLED_COLOR_WHITE);
				}
				if(play_flag == 1){
					playSong(songs[song_index]);
				}
			}
		}
	}
}

void do_Emergency(){
//	printf("Entered Emergency Mode\n");
	//OLED screen should display "EMERGENCY Mode!"
	oled_clearScreen(OLED_COLOR_BLACK);
	oled_putString(0, 0, (uint8_t *) "EMERGENCY Mode!", OLED_COLOR_WHITE, OLED_COLOR_BLACK);

	prev_blink_blue_ticks
	= prev_alternateled_ticks
	= emer_start_ticks
	= prev_sensor_ticks
	= prev_uart_ticks = Get_Time();

	//send a message to FiTrackX that reads “EMERGENCY!"
	sprintf(uart_msg, "EMERGENCY!\r\n");
	UART_Send(LPC_UART3, (uint8_t *) uart_msg, strlen(uart_msg), BLOCKING);

	while(state == Emergency){
		//Refresh
		if ((Get_Time() - prev_sensor_ticks) >= sensor_refresh_ticks){
			//as well as the net acceleration, the temperature as well as the duration for which FitNUS has been in EMERGENCY Mode.
			acc_read(&x, &y, &z);
			x = x+xoff;
			y = y+yoff;
			z = z+zoff;
			net_acc = (sqrt(x*x + y*y + z*z)) / 64;
			sprintf(temp_string,"Acc: %5.2f g", net_acc);
			oled_putString(0, 8, (uint8_t *) temp_string, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			tempvalue = (fast_temp_read() != 0)? fast_temp_read():tempvalue; //gives 10* temperature in degree C
			sprintf(temp_string,"Temp: %lu.%lu deg", tempvalue/10, tempvalue%10);
			oled_putString(0, 16, (uint8_t *) temp_string, OLED_COLOR_WHITE, OLED_COLOR_BLACK);

			prev_sensor_ticks = Get_Time();
		}

		if (Get_Time() - emer_start_ticks >= 1000){
			emer_dur ++;
			emer_start_ticks = Get_Time();
			sprintf(temp_string,"Dur: %5lu s", emer_dur);
			oled_putString(0, 24, (uint8_t *) temp_string, OLED_COLOR_WHITE, OLED_COLOR_BLACK);
		}

		//RGB LED should behave as described in ALTERNATE_LED
		ALTERNATE_LED();

		//Every 5 seconds, FitNUS should send the accelerometer and temperature sensor readings as well as the time elapsed since entering EMERGENCY Mode to FiTrackX.
		if ((Get_Time() - prev_uart_ticks) >= 5000){
			sprintf(uart_msg,"Acc: %5.2f g ", net_acc);
			UART_Send(LPC_UART3, (uint8_t*)uart_msg, strlen(uart_msg), BLOCKING);
			
			sprintf(uart_msg,"Temp: %lu.%lu deg ", tempvalue/10, tempvalue%10);
			UART_Send(LPC_UART3, (uint8_t*)uart_msg, strlen(uart_msg), BLOCKING);

			sprintf(uart_msg,"Dur:%4lu s\r\n", emer_dur);
			UART_Send(LPC_UART3, (uint8_t*)uart_msg, strlen(uart_msg), BLOCKING);

			prev_uart_ticks = Get_Time();
		}
	}
}

void do_Emergency_over(){
//	printf("Entered Emergency_over Mode\n");
	oled_clearScreen(OLED_COLOR_BLACK);
	//MODE_TOGGLE and EMERGENCY_OVER are simultaneously pressed
	//send the message: "Emergency is cleared! Time consumed for recovery: xx sec", where xx is the time elapsed since entering EMERGENCY Mode
	//duration has been saved in emer_dur
	sprintf(uart_msg,"Emergency is cleared! Time consumed for recovery: %lu sec\r\n", emer_dur);
	UART_Send(LPC_UART3, (uint8_t *)uart_msg, strlen(uart_msg), BLOCKING);

	emer_dur = 0;
	prev_saved_ticks
	= prev_blink_blue_ticks = Get_Time();

	while (state == Emergency_over){
		//5-second duration should elapse before the device enters CLIMB Mode automatically.
		//During these 5 seconds, the 7-segment display should show the letters S-A-U-E-D, with each letter changing every 1 second (V cannot be displayed on the 7-segment, so it is replaced with U').
		saved();
		//and RGB_LED should behave as described in BLINK_BLUE.
		BLINK_BLUE();
	}
}

//Interrupt Handlers
void EINT0_IRQHandler(void){
	// SW3
	if ((LPC_SC -> EXTINT >> 0) & 0x1){ //sw3 P2.10 with PIO2_9
		LPC_SC -> EXTINT |= (1<<0);
//		printf("SW3 is pressed in EINT0\n");
		if (state == Initialization){
			state = ItoC;
//			printf("State changed from Initialization to ItoC\n");
		}else if (state == Climb){
			//TEMP_THRESHOLD Calibration
			TEMP_THRESHOLD = tempvalue + 5; //0.5 degrees C above current temp
//			printf("TEMP_THRESHOLD calibrated to %lu\n", TEMP_THRESHOLD);
		}else if (state == Emergency && (((GPIO_ReadValue(1) >> 31) & 0x1) == 0)){ //sw4 ==0 when pressed
			state = Emergency_over;
//			printf("State changed to Emergency_over\n");
		}
	}
}

void EINT3_IRQHandler(void){
	// Temperature sensor
	if ((LPC_GPIOINT ->IO0IntStatR>>2) & 0x1){
		LPC_GPIOINT ->IO0IntClr = 1<<2; //clear the interrupt
		temp_periods_cnt++;
		if(temp_periods_cnt == 1) 					t1 = Get_Time();
		else if(temp_periods_cnt == temp_periods+1) t2 = Get_Time();
		else if(temp_periods_cnt == temp_periods*2) temp_periods_cnt = 0;
	}

//	// SW3 (used EINT0 Interrupt instead)
//	if ((LPC_GPIOINT ->IO0IntStatF>>4) & 0x1){ //sw3
//		LPC_GPIOINT ->IO0IntClr = 1<<4; //clear the interrupt
////		printf("SW3 is pressed in EINT3\n");
//		if (state == Initialization){
//			state = ItoC;
////			printf("State changed from Initialization to ItoC\n");
//		}else if (state == Climb){
//			//TEMP_THRESHOLD Calibration
//			TEMP_THRESHOLD = tempvalue + 5; //0.5 degrees C above current temp
//			printf("TEMP_THRESHOLD calibrated to %lu\n", TEMP_THRESHOLD);
//		}else if (state == Emergency && (((GPIO_ReadValue(1) >> 31) & 0x1) == 0)){ //sw4 ==0 when pressed
//			state = Emergency_over;
////			printf("State changed to Emergency_over\n");
//		}
//	}

	if(state == Climb){
		if(Climb_State == Music){
			//JOYSTICK_CENTER
			if ((LPC_GPIOINT ->IO0IntStatF >> 17) & 0x1){
				LPC_GPIOINT ->IO0IntClr = 1<<17; //clear the interrupt
//				printf("JOYSTICK_CENTER\n");
				play_flag = (play_flag)?0:1;
			}
			//JOYSTICK_DOWN
			else if ((LPC_GPIOINT ->IO0IntStatF >> 15) & 0x1){
				LPC_GPIOINT ->IO0IntClr = 1<<15; //clear the interrupt
//				printf("JOYSTICK_DOWN\n");
				prev_song_index = song_index;
				song_index = (song_index < number_of_songs-1)? song_index+1: 0;
				scroll_updated = 0;
				song_changed = 1;
			}
			//JOYSTICK_UP
			else if ((LPC_GPIOINT ->IO2IntStatF >> 3) & 0x1){
				LPC_GPIOINT ->IO2IntClr = 1<<3; //clear the interrupt
//				printf("JOYSTICK_UP\n");
				prev_song_index = song_index;
				song_index = (song_index > 0)? song_index-1: number_of_songs-1;
				scroll_updated = 0;
				song_changed = 1;
			}
		}
		//JOYSTICK_RIGHT
		if ((LPC_GPIOINT ->IO0IntStatF >> 16) & 0x1){
			LPC_GPIOINT ->IO0IntClr = 1<<16; //clear the interrupt
//			printf("JOYSTICK_RIGHT\n");
			Climb_State = (Climb_State == Music)? None: Music;
		}
		//JOYSTICK_LEFT
		else if ((LPC_GPIOINT ->IO2IntStatF >> 4) & 0x1){
			LPC_GPIOINT ->IO2IntClr = 1<<4; //clear the interrupt
//			printf("JOYSTICK_LEFT\n");
			Climb_State = (Climb_State == Music)? None: Music;
		}
	}
}

//UART3 interrupt handler
void UART3_IRQHandler(void){
	if((LPC_UART3->IIR & 0xE) == 0b0100){ //RDA
//		printf("RDA Interrupt Trigerred\n");
		if(UART_Receive(LPC_UART3, (uint8_t*)&rxbuf[rx_count], 1, BLOCKING) == 1){
			if(rxbuf[rx_count] == '\r'){ //command completed, enter key pressed
//				printf("Command Received\n");
				rxbuf[rx_count+1] = 0; //end of string in rxbuf
				if 		(strcmp(rxbuf, "On Acc\r"	)==0)	acc_on = 1;
				else if (strcmp(rxbuf, "Off Acc\r"	)==0) 	acc_on = 0;
				else if (strcmp(rxbuf, "On Temp\r"	)==0) 	temp_on = 1;
				else if (strcmp(rxbuf, "Off Temp\r"	)==0) 	temp_on = 0;
				else if (strcmp(rxbuf, "On Light\r"	)==0) 	light_on = 1;
				else if (strcmp(rxbuf, "Off Light\r")==0) 	light_on = 0;
				else UART_Send(LPC_UART3, (uint8_t*)UART_Error_msg, strlen(UART_Error_msg), BLOCKING);
				rx_count = 0;
				printf("Entered: %s\n", rxbuf);
			}
			else rx_count = (rx_count == 63)? 0: rx_count+1;
		}
		//UART interrupts are automatically cleared
	}
}

//Handler occurs every 1ms
void SysTick_Handler (void){
	msTicks++;
}

int main (void) {
	init_everything();
    /* <---- Reset All Displays ------ */
    oled_clearScreen(OLED_COLOR_BLACK);
    led7seg_setChar(0xFF, TRUE);
    while (1){
    	if (state == Initialization){
    		do_Initialization();
    	}
    	if (state == ItoC){
    		do_toclimb();
    	}
    	if (state == Climb){
    		do_Climb();
		}
    	if (state == Emergency){
			do_Emergency();
		}
    	if (state == Emergency_over){
    		do_Emergency_over();
    	}
    }
}

void check_failed(uint8_t *file, uint32_t line)
{
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

	/* Infinite loop */
	while(1);
}
